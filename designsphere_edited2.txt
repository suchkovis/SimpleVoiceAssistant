import pygame
import math
import sys

# Инициализация Pygame
pygame.init()

# Константы и начальные настройки
WIDTH, HEIGHT = 800, 600
LIGHT_THEME = (255, 255, 255)
DARK_THEME = (30, 30, 30)
CIRCLE_COLOR = (100, 150, 255)
TEXT_COLOR = (255, 255, 255)
BUTTON_COLOR = (70, 70, 70)
BUTTON_HOVER_COLOR = (100, 100, 100)

# Начальные параметры сферы
amplitude = 20  # Малый диапазон изначально
speed = 6.0  # Фиксированная высокая скорость
theme = DARK_THEME
menu_open = False
clock = pygame.time.Clock()
font = pygame.font.SysFont("Arial", 20)

# Функция отрисовки текста
def draw_text(surface, text, pos, color):
    text_surface = font.render(text, True, color)
    surface.blit(text_surface, pos)

# Функция создания кнопки
def create_button(surface, text, rect, color, hover_color, text_color, action=None):
    mouse_pos = pygame.mouse.get_pos()
    is_hovered = rect.collidepoint(mouse_pos)
    pygame.draw.rect(surface, hover_color if is_hovered else color, rect)
    draw_text(surface, text, (rect.x + 10, rect.y + 5), text_color)
    return is_hovered and pygame.mouse.get_pressed()[0]

# Инициализация окна
screen = pygame.display.set_mode((WIDTH, HEIGHT))
pygame.display.set_caption("Пульсирующая сфера")

# Основной игровой цикл
time = 0
running = True
while running:
    screen.fill(theme)
    time += clock.get_time() / 1000 * speed  # Время обновляется с фиксированной скоростью

    # Отрисовка меню, если оно открыто
    if menu_open:
        menu_rect = pygame.Rect(WIDTH // 4, HEIGHT // 4, WIDTH // 2, HEIGHT // 2)
        pygame.draw.rect(screen, BUTTON_COLOR, menu_rect)

        light_theme_button = pygame.Rect(menu_rect.x + 50, menu_rect.y + 50, 200, 50)
        dark_theme_button = pygame.Rect(menu_rect.x + 50, menu_rect.y + 120, 200, 50)

        if create_button(screen, "Светлая тема", light_theme_button, BUTTON_COLOR, BUTTON_HOVER_COLOR, TEXT_COLOR):
            theme = LIGHT_THEME
        if create_button(screen, "Темная тема", dark_theme_button, BUTTON_COLOR, BUTTON_HOVER_COLOR, TEXT_COLOR):
            theme = DARK_THEME

        back_button = pygame.Rect(menu_rect.x + 50, menu_rect.y + 190, 200, 50)
        if create_button(screen, "Назад", back_button, BUTTON_COLOR, BUTTON_HOVER_COLOR, TEXT_COLOR):
            menu_open = False

    else:
        # Координаты и радиус пульсирующей сферы
        center_x, center_y = WIDTH // 2, HEIGHT // 2
        radius = 100 + amplitude * (0.5 + 0.5 * math.sin(time))  # Плавная синусоида от 0 до 1

        # Отрисовка сферы
        pygame.draw.circle(screen, CIRCLE_COLOR, (center_x, center_y), int(radius))

        # Кнопки управления амплитудой
        amplitude_listen_button = pygame.Rect(10, 160, 150, 40)
        amplitude_loading_button = pygame.Rect(10, 210, 150, 40)
        amplitude_answer_button = pygame.Rect(10, 260, 150, 40)

        menu_button = pygame.Rect(WIDTH - 160, 10, 150, 40)

        if create_button(screen, "Слушать", amplitude_listen_button, BUTTON_COLOR, BUTTON_HOVER_COLOR, TEXT_COLOR):
            amplitude = 10  # Маленькая амплитуда
        if create_button(screen, "Загрузка", amplitude_loading_button, BUTTON_COLOR, BUTTON_HOVER_COLOR, TEXT_COLOR):
            amplitude = 20  # Средняя амплитуда
        if create_button(screen, "Ответ", amplitude_answer_button, BUTTON_COLOR, BUTTON_HOVER_COLOR, TEXT_COLOR):
            amplitude = 40  # Большая амплитуда

        if create_button(screen, "Меню", menu_button, BUTTON_COLOR, BUTTON_HOVER_COLOR, TEXT_COLOR):
            menu_open = True

    # Обработка событий
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            running = False

    # Обновление экрана
    pygame.display.flip()
    clock.tick(60)

# Завершение программы
pygame.quit()
sys.exit()
